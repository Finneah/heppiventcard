// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MainAlertDialog renders correctly 1`] = `
<RNCSafeAreaProvider
  onInsetsChange={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <View
    alignItems="center"
    display="flex"
    justifyContent="center"
    style={
      Array [
        Object {
          "alignItems": "center",
          "display": "flex",
          "justifyContent": "center",
        },
      ]
    }
  />
  <View
    collapsable={false}
    pointerEvents="box-none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      needsOffscreenAlphaCompositing={true}
      pointerEvents="box-none"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": 0,
            },
            Object {
              "translateX": 0,
            },
            Object {
              "scale": 1,
            },
            Object {
              "scaleX": 1,
            },
            Object {
              "scaleY": 1,
            },
            Object {
              "rotate": "0deg",
            },
          ],
        }
      }
    >
      <View
        _text={
          Object {
            "color": "lightText",
          }
        }
        accessible={false}
        bg="rgba(0, 0, 0, 0.3)"
        bottom={0}
        collapsable={false}
        focusable={true}
        importantForAccessibility="no"
        left={0}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onHoverIn={[Function]}
        onHoverOut={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        position="absolute"
        right={0}
        style={
          Array [
            Object {
              "backgroundColor": "rgba(0, 0, 0, 0.3)",
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            },
          ]
        }
        top={0}
      />
    </View>
    <View
      needsOffscreenAlphaCompositing={true}
      pointerEvents="box-none"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "transform": Array [
            Object {
              "translateY": 0,
            },
            Object {
              "translateX": 0,
            },
            Object {
              "scale": 1,
            },
            Object {
              "scaleX": 1,
            },
            Object {
              "scaleY": 1,
            },
            Object {
              "rotate": "0deg",
            },
          ],
        }
      }
    >
      <View
        alignItems="center"
        closeOnOverlayClick={true}
        height="100%"
        justifyContent="center"
        pointerEvents="box-none"
        style={
          Array [
            Object {
              "alignItems": "center",
              "height": "100%",
              "justifyContent": "center",
              "width": "100%",
            },
          ]
        }
        width="100%"
      >
        <View
          accessibilityViewIsModal={true}
          aria-modal="true"
          bg="gray.50"
          maxHeight="1184px"
          onAccessibilityEscape={[Function]}
          pl={6}
          pt={6}
          rounded="lg"
          style={
            Array [
              Object {
                "backgroundColor": "#fafafa",
                "borderRadius": 6,
                "maxHeight": 1184,
                "paddingLeft": 24,
                "paddingTop": 24,
                "width": "90%",
              },
              Object {
                "elevation": 4,
                "shadowColor": "#000000",
                "shadowOffset": Object {
                  "height": 2,
                  "width": 0,
                },
                "shadowOpacity": 0.23,
                "shadowRadius": 2.62,
              },
            ]
          }
          width="90%"
        >
          <View
            pb={3}
            pr={6}
            style={
              Array [
                Object {
                  "paddingBottom": 12,
                  "paddingRight": 24,
                },
              ]
            }
          >
            <Text
              color="muted.700"
              fontFamily="body"
              fontSize="xl"
              fontStyle="normal"
              fontWeight="bold"
              style={
                Array [
                  Object {
                    "color": "#404040",
                    "fontSize": 20,
                    "fontStyle": "normal",
                    "fontWeight": "700",
                  },
                ]
              }
            >
              title
            </Text>
          </View>
          <RCTScrollView>
            <View>
              <View
                pb={7}
                pr={6}
                style={
                  Array [
                    Object {
                      "paddingBottom": 28,
                      "paddingRight": 24,
                    },
                  ]
                }
              >
                <Text
                  color="gray.600"
                  fontFamily="body"
                  fontSize="md"
                  fontStyle="normal"
                  fontWeight={400}
                  style={
                    Array [
                      Object {
                        "color": "#52525b",
                        "fontSize": 16,
                        "fontStyle": "normal",
                        "fontWeight": "400",
                      },
                    ]
                  }
                >
                  description
                </Text>
              </View>
            </View>
          </RCTScrollView>
          <View
            flexDirection="row"
            flexWrap="wrap"
            justifyContent="flex-end"
            pr={2}
            py={2}
            style={
              Array [
                Object {
                  "flexDirection": "row",
                  "flexWrap": "wrap",
                  "justifyContent": "flex-end",
                  "paddingBottom": 8,
                  "paddingRight": 8,
                  "paddingTop": 8,
                },
              ]
            }
          >
            <View
              _text={
                Object {
                  "color": "lightText",
                }
              }
              accessibilityRole="button"
              accessible={true}
              alignItems="center"
              bg="primary.500"
              borderRadius="lg"
              collapsable={false}
              colorScheme="primary"
              flexDirection="row"
              focusable={true}
              justifyContent="center"
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onHoverIn={[Function]}
              onHoverOut={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              px={4}
              py={3}
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#06b6d4",
                    "borderRadius": 6,
                    "flexDirection": "row",
                    "justifyContent": "center",
                    "paddingBottom": 12,
                    "paddingLeft": 16,
                    "paddingRight": 16,
                    "paddingTop": 12,
                  },
                ]
              }
              variant="solid"
            >
              <View
                alignItems="center"
                flexDirection="row"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      Object {},
                    ]
                  }
                >
                  <Text
                    color="lightText"
                    fontFamily="body"
                    fontSize="md"
                    fontStyle="normal"
                    fontWeight={600}
                    style={
                      Array [
                        Object {
                          "color": "#FFFFFF",
                          "fontSize": 16,
                          "fontStyle": "normal",
                          "fontWeight": "600",
                        },
                      ]
                    }
                  >
                    CANCEL
                  </Text>
                </View>
              </View>
            </View>
            <View
              _text={
                Object {
                  "color": "lightText",
                }
              }
              accessibilityRole="button"
              accessible={true}
              alignItems="center"
              bg="secondary.500"
              borderRadius="lg"
              collapsable={false}
              colorScheme="secondary"
              flexDirection="row"
              focusable={true}
              justifyContent="center"
              ml={3}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onHoverIn={[Function]}
              onHoverOut={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              px={4}
              py={3}
              style={
                Array [
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "#ec4899",
                    "borderRadius": 6,
                    "flexDirection": "row",
                    "justifyContent": "center",
                    "marginLeft": 12,
                    "paddingBottom": 12,
                    "paddingLeft": 16,
                    "paddingRight": 16,
                    "paddingTop": 12,
                  },
                ]
              }
              variant="solid"
            >
              <View
                alignItems="center"
                flexDirection="row"
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "flexDirection": "row",
                    },
                  ]
                }
              >
                <View
                  style={
                    Array [
                      Object {},
                    ]
                  }
                >
                  <Text
                    color="lightText"
                    fontFamily="body"
                    fontSize="md"
                    fontStyle="normal"
                    fontWeight={600}
                    style={
                      Array [
                        Object {
                          "color": "#FFFFFF",
                          "fontSize": 16,
                          "fontStyle": "normal",
                          "fontWeight": "600",
                        },
                      ]
                    }
                  >
                    okButtonText
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</RNCSafeAreaProvider>
`;
